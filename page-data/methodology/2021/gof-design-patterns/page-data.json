{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/methodology/2021/gof-design-patterns/","result":{"data":{"site":{"siteMetadata":{"title":"Jun Wick's Blog","author":{"name":"Sung Jun, Hwang"}}},"markdownRemark":{"id":"c9eef294-a81c-5f45-95da-d0f578c1d9c9","excerpt":"정보처리기사책을 공부하다 보면 나오는 GoF 디자인 패턴이 나옵니다. 예제가 있으면 이해가 쉬울거 같아 정리를 해봅니다. 저는 Dart언어를 좋아해서 구글링을 해보니 이미 누군가가 정리해 놓은 글이 있어 인용합니다. Dart로 구현한 Degisn Patterns 생성(Creational…","html":"<p>정보처리기사책을 공부하다 보면 나오는 GoF 디자인 패턴이 나옵니다.</p>\n<p>예제가 있으면 이해가 쉬울거 같아 정리를 해봅니다.</p>\n<p>저는 Dart언어를 좋아해서 구글링을 해보니 이미 누군가가 정리해 놓은 글이 있어 인용합니다. <a href=\"https://scottt2.github.io/design-patterns-in-dart/\">Dart로 구현한 Degisn Patterns</a></p>\n<h1>생성(Creational) 패턴</h1>\n<ul>\n<li>객체를 생성하는 데 사용되는 패턴이다.</li>\n<li>클래스 정의와 객체 생성 방식을 구조화, 캡슐화한 방법을 제사한다.</li>\n<li>객체를 생성하거나 수정되어도 프로그램 구조에 영향을 적게 받도록 한다.</li>\n<li>캡슐화하여 부작용을 최소화한다.</li>\n</ul>\n<h2>종류</h2>\n<p>5개</p>\n<h3>Abstract Facotry</h3>\n<ul>\n<li>추상 팩토리 패턴은 구체적인 클래스를 지정하지 않고 공통된 주제를 가진 개별 팩토리 그룹을 캡슐화하는 방법을 제공한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// '마실 수 있는' 추상형태를 가진 추상 클래스 정의</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Drinkable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">pour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '붓다'라는 함수를 갖는다</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Beer 객체를 정의</span>\n<span class=\"token comment\">// Drinkable 추상 클래스를 구현해 추상 팩토리에서 활용할 수 있는 객체로 만듦</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Beer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Drinkable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 함수를 구현</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">pour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pouring a delicious beer!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Coffee 객체를 정의</span>\n<span class=\"token comment\">// Beer와 마찬가지로 Drinkable에는 두 종류의 구현 객체가 존재</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Coffee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Drinkable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">pour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pouring a refreshing coffee!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 추상 팩토리 객체를 정의</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DrinkFactory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Drinkable 객체를 return 하는 함수를 갖는다</span>\n  Drinkable <span class=\"token function\">createDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Pub 객체를 정의</span>\n<span class=\"token comment\">// DrinkFactory 추상 클래스를 구현</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pub</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DrinkFactory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Beer를 만들어 주는 함수를 구현</span>\n  Drinkable <span class=\"token function\">createDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Beer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// CoffeeShop 객체를 정의</span>\n<span class=\"token comment\">// Pub과 마찬가지로 DrinkFactory에는 두 종류의 구현 객체가 존재</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeShop</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DrinkFactory</span> <span class=\"token punctuation\">{</span>\n  Drinkable <span class=\"token function\">createDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Coffee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 기분을 설정</span>\n  <span class=\"token keyword\">var</span> mood <span class=\"token operator\">=</span> <span class=\"token string\">\"sleepy\"</span><span class=\"token punctuation\">;</span>\n  DrinkFactory destination<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 기분에 따라 생성되는 객체가 달라짐</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mood<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"sleepy\"</span><span class=\"token punctuation\">:</span>\n      destination <span class=\"token operator\">=</span> <span class=\"token function\">CoffeeShop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">:</span>\n      destination <span class=\"token operator\">=</span> <span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I only have two moods...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 음료를 생성</span>\n  <span class=\"token keyword\">var</span> myBeverage <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">.</span><span class=\"token function\">createDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 부으면 음료에 따라 호출되는 내용이 달라짐</span>\n  myBeverage<span class=\"token punctuation\">.</span><span class=\"token function\">pour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Factory Method</h3>\n<ul>\n<li>팩토리 메서드 패턴은 생성 될 객체의 정확한 클래스를 지정하지 않고도 팩토리 메소드를 사용하여 개체를 만드는 문제를 처리하는 생성 패턴입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Volume</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 상수 변수 두개 선언</span>\n  <span class=\"token keyword\">final</span> int quantity<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> String unit<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 생성자 지정</span>\n  <span class=\"token function\">Volume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"$quantity $unit\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 추상 클래스 정의</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vessel</span> <span class=\"token punctuation\">{</span>\n  Volume volume<span class=\"token punctuation\">;</span>\n  String liquid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vessel을 상속받은 Bucket 정의</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bucket</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vessel</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> Volume volume<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 생성자에서 받은 인자를 Volumn 생성자에 넘겨줌 값을 내부 변수 volume에 대입</span>\n  <span class=\"token function\">Bucket</span><span class=\"token punctuation\">(</span>int q<span class=\"token punctuation\">,</span> String u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> volume <span class=\"token operator\">=</span> <span class=\"token function\">Volume</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// toString 함수 정의</span>\n  String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"a $volume bucket full of $liquid\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cup</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vessel</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> Volume volume<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">Cup</span><span class=\"token punctuation\">(</span>int q<span class=\"token punctuation\">,</span> String u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> volume <span class=\"token operator\">=</span> <span class=\"token function\">Volume</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"a $volume cup full of $liquid\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// '피로'라는 enum 정의</span>\n<span class=\"token keyword\">enum</span> Tiredness <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 휴식, 졸림, 겨우 살아있음, 아이가 있다(말 못할 고통??)</span>\n  rested<span class=\"token punctuation\">,</span>\n  sleepy<span class=\"token punctuation\">,</span>\n  barelyAlive<span class=\"token punctuation\">,</span>\n  hasChildren\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 커피 용기 공장 함수 정의</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeVesselFactory</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 전역 함수 정의</span>\n  <span class=\"token keyword\">static</span> Vessel <span class=\"token function\">vesselFor</span><span class=\"token punctuation\">(</span>Tiredness howTired<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Vessel vessel<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 얼마나 피곤하지에 따라서 용기의 양이 달라짐</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>howTired<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> Tiredness<span class=\"token punctuation\">.</span>rested<span class=\"token punctuation\">:</span>\n        vessel <span class=\"token operator\">=</span> <span class=\"token function\">Cup</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"milliliter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> Tiredness<span class=\"token punctuation\">.</span>sleepy<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> Tiredness<span class=\"token punctuation\">.</span>barelyAlive<span class=\"token punctuation\">:</span>\n        vessel <span class=\"token operator\">=</span> <span class=\"token function\">Cup</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"milliliter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> Tiredness<span class=\"token punctuation\">.</span>hasChildren<span class=\"token punctuation\">:</span>\n        vessel <span class=\"token operator\">=</span> <span class=\"token function\">Bucket</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"liter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        vessel <span class=\"token operator\">=</span> <span class=\"token function\">Cup</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"milliliter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 액체는 모두 다 커피</span>\n    vessel<span class=\"token punctuation\">.</span>liquid <span class=\"token operator\">=</span> <span class=\"token string\">\"coffee\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> vessel<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sleepyVessel <span class=\"token operator\">=</span> CoffeeVesselFactory<span class=\"token punctuation\">.</span><span class=\"token function\">vesselFor</span><span class=\"token punctuation\">(</span>Tiredness<span class=\"token punctuation\">.</span>sleepy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> kidVessel <span class=\"token operator\">=</span> CoffeeVesselFactory<span class=\"token punctuation\">.</span><span class=\"token function\">vesselFor</span><span class=\"token punctuation\">(</span>Tiredness<span class=\"token punctuation\">.</span>hasChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// A sleepy person would like a 500 milliliter cup full of coffee.</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A sleepy person would like $sleepyVessel.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// A person with children NEEDS a 5 liter bucket full of coffee.</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A person with children NEEDS $kidVessel.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Builder</h3>\n<ul>\n<li>Builder 디자인 패턴의 목적은 복잡한 객체의 구성과 표현을 분리하는 것입니다.</li>\n<li>이런식으로 같은 생성 방식으로 다른 객체들을 만들 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PizzaBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 빵 껍질</span>\n  String _crust<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 지름</span>\n  int _diameter<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 구성들</span>\n  Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> _toppings<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">PizzaBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_diameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// getter</span>\n  String <span class=\"token keyword\">get</span> crust <span class=\"token operator\">=</span><span class=\"token operator\">></span> _crust<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// setter</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">crust</span><span class=\"token punctuation\">(</span>String newCrust<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _crust <span class=\"token operator\">=</span> newCrust<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  int <span class=\"token keyword\">get</span> diameter <span class=\"token operator\">=</span><span class=\"token operator\">></span> _diameter<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">diameter</span><span class=\"token punctuation\">(</span>int newDiameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _diameter <span class=\"token operator\">=</span> newDiameter<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token keyword\">get</span> toppings <span class=\"token operator\">=</span><span class=\"token operator\">></span> _toppings<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">toppings</span><span class=\"token punctuation\">(</span>Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> newToppings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _toppings <span class=\"token operator\">=</span> newToppings<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_ensureCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 치즈 추가</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">_ensureCheese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _toppings<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cheese\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Pizza <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Pizza</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span> <span class=\"token punctuation\">{</span>\n  String _crust<span class=\"token punctuation\">;</span>\n  int _diameter<span class=\"token punctuation\">;</span>\n  Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> _toppings<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">Pizza</span><span class=\"token punctuation\">(</span>PizzaBuilder builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _crust <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>crust<span class=\"token punctuation\">;</span>\n    _diameter <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>diameter<span class=\"token punctuation\">;</span>\n    _toppings <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  String <span class=\"token keyword\">get</span> crust <span class=\"token operator\">=</span><span class=\"token operator\">></span> _crust<span class=\"token punctuation\">;</span>\n  int <span class=\"token keyword\">get</span> diameter <span class=\"token operator\">=</span><span class=\"token operator\">></span> _diameter<span class=\"token punctuation\">;</span>\n  String <span class=\"token keyword\">get</span> toppings <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_stringifiedToppings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 토핑 목록을 \", \"으로 연결된 문자열로 변환</span>\n  String <span class=\"token function\">_stringifiedToppings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> stringToppings <span class=\"token operator\">=</span> _toppings<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> lastComma <span class=\"token operator\">=</span> stringToppings<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> replacement <span class=\"token operator\">=</span>\n        <span class=\"token string\">\",\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">allMatches</span><span class=\"token punctuation\">(</span>stringToppings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">\", and\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\" and\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> stringToppings<span class=\"token punctuation\">.</span><span class=\"token function\">replaceRange</span><span class=\"token punctuation\">(</span>lastComma<span class=\"token punctuation\">,</span> lastComma <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> replacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"A delicious $_diameter\\\" pizza with $_crust crust covered in $toppings\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * * pizzaBuilder에 속성들을 집어넣은 후\n   * * Pizza 객체 생성자에 pizzaBuilder를 넣어 생성하면 완성된 피자가 만들어진다.\n   */</span>\n  <span class=\"token comment\">// Create a handy PizzaBuilder with an 8\" diameter.</span>\n  <span class=\"token keyword\">var</span> pizzaBuilder <span class=\"token operator\">=</span> <span class=\"token function\">PizzaBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Add some attributes to the builder.</span>\n  pizzaBuilder<span class=\"token punctuation\">.</span>crust <span class=\"token operator\">=</span> <span class=\"token string\">\"deep dish\"</span><span class=\"token punctuation\">;</span>\n  pizzaBuilder<span class=\"token punctuation\">.</span>toppings <span class=\"token operator\">=</span> Set<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"pepperoni\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Let's make a pizza!</span>\n  <span class=\"token keyword\">var</span> plainPizza <span class=\"token operator\">=</span> <span class=\"token function\">Pizza</span><span class=\"token punctuation\">(</span>pizzaBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Behold! $plainPizza\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>plainPizza<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span>\n      <span class=\"token string\">\"A delicious 8\\\" pizza with deep dish crust covered in pepperoni and cheese\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Now to adjust some things for the next pizza...</span>\n  pizzaBuilder<span class=\"token punctuation\">.</span>crust <span class=\"token operator\">=</span> <span class=\"token string\">\"gold plated\"</span><span class=\"token punctuation\">;</span>\n  pizzaBuilder<span class=\"token punctuation\">.</span>diameter <span class=\"token operator\">=</span> <span class=\"token number\">72</span><span class=\"token punctuation\">;</span>\n  pizzaBuilder<span class=\"token punctuation\">.</span>toppings <span class=\"token operator\">=</span> Set<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"anchovies\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"caviar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"diamonds\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The beauty of the build is you can quickly iterate and produce instances of a class.</span>\n  <span class=\"token comment\">// For example, we have an early employee of the latest unicorn in line. So much disposable income!</span>\n  <span class=\"token comment\">// Also note, we use the .build() function of the builder this time.</span>\n  <span class=\"token keyword\">var</span> luxuriousPizza <span class=\"token operator\">=</span> pizzaBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wow! $luxuriousPizza? Somone is rich!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>luxuriousPizza<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span>\n      <span class=\"token string\">\"A delicious 72\\\" pizza with gold plated crust covered in anchovies, caviar, diamonds, and cheese\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Prototype</h3>\n<ul>\n<li>프로토타입 방식은 새 객체를 생성하기 위해 복제되는 원형 객체에 의해 결정됩니다.</li>\n<li>\n<p>이 패턴은 이럴 때 사용됩니다.</p>\n<ul>\n<li>애플리케이션에서 팩토리 메서드 방식이 하는 것처럼 객체 생성자의 하위 클래스를 피할 때</li>\n<li>애플리케이션에서 기본 방식으로(예 new 키워드 사용) 새 객체 생성이 엄청나게 많은 비용이 발생하는 경우를 피하기 위해</li>\n</ul>\n</li>\n<li>이 방식을 구현하려면, 순수한 가상 clone() 함수를 정의한 기본 추상 클래스를 선언하세요. 추상 클래스에서 파생된 “다형 생성자” 기능이 필요한 클래스는 clone() 함수를 구현해야합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  int x<span class=\"token punctuation\">;</span>\n  int y<span class=\"token punctuation\">;</span>\n  Shape <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  int height<span class=\"token punctuation\">;</span>\n  int width<span class=\"token punctuation\">;</span>\n  int x<span class=\"token punctuation\">;</span>\n  int y<span class=\"token punctuation\">;</span>\n\n  int _hashCode<span class=\"token punctuation\">;</span>\n  bool isClone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  String <span class=\"token keyword\">get</span> cloneStatus <span class=\"token operator\">=</span><span class=\"token operator\">></span> isClone <span class=\"token operator\">?</span> <span class=\"token string\">\"is a clone\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"is an original gangster\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">fromSource</span><span class=\"token punctuation\">(</span>Rectangle source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    height <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    width <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    y <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    _hashCode <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>hashCode<span class=\"token punctuation\">;</span>\n    isClone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Rectangle <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">fromSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  int <span class=\"token keyword\">get</span> hashCode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_hashCode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> _hashCode<span class=\"token punctuation\">;</span>\n    _hashCode <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>microsecondsSinceEpoch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _hashCode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  bool <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">dynamic</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>other <span class=\"token operator\">is</span> Rectangle<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    Rectangle rect <span class=\"token operator\">=</span> other<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> rect<span class=\"token punctuation\">.</span>isClone <span class=\"token operator\">&amp;&amp;</span> rect<span class=\"token punctuation\">.</span>hashCode <span class=\"token operator\">==</span> hashCode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> ogRect <span class=\"token operator\">=</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> cloneRect <span class=\"token operator\">=</span> ogRect<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> someOtherRect <span class=\"token operator\">=</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ogRect ${ogRect.cloneStatus}.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cloneRect ${cloneRect.cloneStatus}.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someOtherRect ${someOtherRect.cloneStatus}.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  String cloneIsClonse <span class=\"token operator\">=</span>\n      ogRect <span class=\"token operator\">==</span> cloneRect <span class=\"token operator\">?</span> <span class=\"token string\">\"is a clone of\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"is not a clone of\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\ncloneRect $cloneIsClonse ogRect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  String someRectIsClone <span class=\"token operator\">=</span>\n      ogRect <span class=\"token operator\">==</span> someOtherRect <span class=\"token operator\">?</span> <span class=\"token string\">\"is a clone of\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"is not a clone of\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someOtherRect $someRectIsClone ogRect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Singleton</h3>\n<ul>\n<li>\n<p>싱글톤 패턴은 클래스의 구현을 단 하나만 생성되기로 제한한 방식입니다. 시스템 내에서 한 객체만 필요한 경우 유용합니다.</p>\n<ul>\n<li>Abstract factory, Builder, Prototype 패턴은 구현에 singleton으로 사용할 수 있습니다.</li>\n<li>Facade 객체는 종종 하나의 facade 객체만을 필요로 하기 때문에 singleton입니다.</li>\n<li>State 객체는 종종 singleton입니다.</li>\n</ul>\n</li>\n<li>싱글톤 패턴은 전역변수로 자주 사용됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Me</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Me _singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Me<span class=\"token punctuation\">.</span>_internal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String _name <span class=\"token operator\">=</span> <span class=\"token string\">\"Typer\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 생성자 함수</span>\n  <span class=\"token keyword\">factory</span> <span class=\"token function\">Me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _singleton<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> String <span class=\"token keyword\">get</span> name <span class=\"token operator\">=</span><span class=\"token operator\">></span> _name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, my name is $name\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// private 생성자, 아무 이름이나 지정 가능</span>\n  Me<span class=\"token punctuation\">.</span><span class=\"token function\">_internal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> tyler <span class=\"token operator\">=</span> <span class=\"token function\">Me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> anotherTyler <span class=\"token operator\">=</span> <span class=\"token function\">Me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tyler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>anotherTyler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> samenessCheck <span class=\"token operator\">=</span> <span class=\"token function\">identical</span><span class=\"token punctuation\">(</span>tyler<span class=\"token punctuation\">,</span> anotherTyler<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">?</span> <span class=\"token string\">\"We are both the same ${Me.name}\"</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token string\">\"We are NOT the same. I mean, just look at us.\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>samenessCheck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>구조(Structural) 패턴</h1>\n<ul>\n<li>여러 개의 객체를 모아 구조화시키는 패턴이다.</li>\n<li>여러 개의 객체를 접근할 수 있는 인터페이스를 제공한다.</li>\n<li>여러 개의 객체를 모아 새로운 기능을 제공하게 한다.</li>\n</ul>\n<h2>종류</h2>\n<p>7개</p>\n<h3>Adapter</h3>\n<h3>Bridge</h3>\n<h3>Composite</h3>\n<h3>Decorator</h3>\n<h3>Facade</h3>\n<h3>Flyweight</h3>\n<h3>Proxy</h3>\n<h1>행위(Behavioral) 패턴</h1>\n<ul>\n<li>객체의 구체적인 알고리즘을 정의하는 패턴이다.</li>\n<li>큰 작업을 여러 개의 객체로 분리한 방법을 제공한다.</li>\n<li>반복적으로 사용하는 객체들의 상호 작용을 패턴화한 것으로 객체의 행위를 조직화, 관리, 연합하는데 사용되는 패턴이다.</li>\n<li>객체 사이의 결합도를 최소화한다.</li>\n<li>알고리즘 수행에 주로 사용된다.</li>\n</ul>\n<h2>종류</h2>\n<p>10개</p>\n<h3>Chain of Responsibility</h3>\n<h3>Command</h3>\n<h3>Interpreter</h3>\n<h3>Iterator</h3>\n<h3>Mediator</h3>\n<h3>Memento</h3>\n<h3>Observer</h3>\n<h3>State</h3>\n<h3>Strategy</h3>\n<h3>Template Method</h3>\n<h3>Visitor</h3>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/methodology/2021/gof-design-patterns/#%EC%83%9D%EC%84%B1creational-%ED%8C%A8%ED%84%B4\">생성(Creational) 패턴</a></p>\n<ul>\n<li>\n<p><a href=\"/methodology/2021/gof-design-patterns/#%EC%A2%85%EB%A5%98\">종류</a></p>\n<ul>\n<li><a href=\"/methodology/2021/gof-design-patterns/#abstract-facotry\">Abstract Facotry</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#factory-method\">Factory Method</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#builder\">Builder</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#prototype\">Prototype</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#singleton\">Singleton</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/methodology/2021/gof-design-patterns/#%EA%B5%AC%EC%A1%B0structural-%ED%8C%A8%ED%84%B4\">구조(Structural) 패턴</a></p>\n<ul>\n<li>\n<p><a href=\"/methodology/2021/gof-design-patterns/#%EC%A2%85%EB%A5%98-1\">종류</a></p>\n<ul>\n<li><a href=\"/methodology/2021/gof-design-patterns/#adapter\">Adapter</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#bridge\">Bridge</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#composite\">Composite</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#decorator\">Decorator</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#facade\">Facade</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#flyweight\">Flyweight</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#proxy\">Proxy</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/methodology/2021/gof-design-patterns/#%ED%96%89%EC%9C%84behavioral-%ED%8C%A8%ED%84%B4\">행위(Behavioral) 패턴</a></p>\n<ul>\n<li>\n<p><a href=\"/methodology/2021/gof-design-patterns/#%EC%A2%85%EB%A5%98-2\">종류</a></p>\n<ul>\n<li><a href=\"/methodology/2021/gof-design-patterns/#chain-of-responsibility\">Chain of Responsibility</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#command\">Command</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#interpreter\">Interpreter</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#iterator\">Iterator</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#mediator\">Mediator</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#memento\">Memento</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#observer\">Observer</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#state\">State</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#strategy\">Strategy</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#template-method\">Template Method</a></li>\n<li><a href=\"/methodology/2021/gof-design-patterns/#visitor\">Visitor</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"GoF(Gang of Four) Design Patterns 정리","date":"January 17, 2021","description":"디자인 패턴을 예제로 좀 더 쉽게 이해해보자","image":null}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/backend/2021/nextauth-guide/"},"frontmatter":{"title":"Next.js로 Admin 만들기","date":"2021-01-16"}}},{"node":{"fields":{"slug":"/backend/2020/test-driven-development/"},"frontmatter":{"title":"TDD(TEST DRIVEN DEVELOPMENT)를 SPRING BOOT에 사용하기","date":"2020-12-01"}}},{"node":{"fields":{"slug":"/backend/2020/mapstruct-guide-first/"},"frontmatter":{"title":"MapStruct 에러 해결 첫번째","date":"2020-08-07"}}},{"node":{"fields":{"slug":"/backend/2020/mapstruct-guide-second/"},"frontmatter":{"title":"MapStruct 에러 해결 두번째","date":"2020-08-07"}}},{"node":{"fields":{"slug":"/backend/2020/spring-security-example1/"},"frontmatter":{"title":"스프링 시큐리티 구축 1","date":"2020-06-17"}}},{"node":{"fields":{"slug":"/backend/2020/spring-security/"},"frontmatter":{"title":"스프링 시큐리티 구축","date":"2020-06-13"}}},{"node":{"fields":{"slug":"/backend/2020/java-jpa/"},"frontmatter":{"title":"JPA 정리","date":"2020-06-08"}}},{"node":{"fields":{"slug":"/backend/2020/spring-msa-config/"},"frontmatter":{"title":"스프링 부트 MSA 프로젝트 - config 서버 구축","date":"2020-05-27"}}},{"node":{"fields":{"slug":"/backend/2020/spring-initializr-gradle-type/"},"frontmatter":{"title":"Spring Initializr Gradle Type 비교","date":"2020-03-24"}}},{"node":{"fields":{"slug":"/backend/2020/type-of-traffic/"},"frontmatter":{"title":"인바운드 트래픽과 아웃바운드 트래픽 설명","date":"2020-03-18"}}},{"node":{"fields":{"slug":"/backend/2020/gradle-summary/"},"frontmatter":{"title":"Gradle 정리","date":"2020-03-16"}}},{"node":{"fields":{"slug":"/backend/2020/nodejs-express-guid/"},"frontmatter":{"title":"Express 가이드","date":"2020-03-13"}}},{"node":{"fields":{"slug":"/backend/2020/backend-roadmap1/"},"frontmatter":{"title":"Backend Developer - How does the internet work?","date":"2020-03-10"}}},{"node":{"fields":{"slug":"/backend/2020/openbanking-test/"},"frontmatter":{"title":"OpenBanking test 적용","date":"2020-03-10"}}},{"node":{"fields":{"slug":"/backend/2020/python-dynamic-parameter/"},"frontmatter":{"title":"Python binds dynamic parameters","date":"2020-02-21"}}},{"node":{"fields":{"slug":"/backend/2020/mybatis-parameter/"},"frontmatter":{"title":"Mybatis parameter 조심해야할 점","date":"2020-02-13"}}},{"node":{"fields":{"slug":"/backend/2020/sql-problem-solving/"},"frontmatter":{"title":"SQL 가상으로 목록 만들기","date":"2020-02-10"}}},{"node":{"fields":{"slug":"/backend/2020/python-exec-example/"},"frontmatter":{"title":"파이썬 exec 함수 사용방법","date":"2020-01-30"}}},{"node":{"fields":{"slug":"/backend/2020/mariadb-rule/"},"frontmatter":{"title":"MariaDB 문자열 합치기","date":"2020-01-21"}}},{"node":{"fields":{"slug":"/backend/2020/vscode-java-clean/"},"frontmatter":{"title":"vscode에서 java clean하는 법","date":"2020-01-20"}}}]}},"pageContext":{"slug":"/methodology/2021/gof-design-patterns/","tag":"backend","previous":{"fields":{"slug":"/backend/2021/nextauth-guide/"},"frontmatter":{"tags":["backend","next.js"]}},"next":{"fields":{"slug":"/others/2021/making-windows10-usb-on-mac/"},"frontmatter":{"tags":["others","macbook","mac-os"]}}}},"staticQueryHashes":["1146911855","1973561601","3826269039"]}