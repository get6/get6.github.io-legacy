{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/backend/2020/mapstruct-guide-first/","result":{"data":{"site":{"siteMetadata":{"title":"Jun Wick's Blog","author":{"name":"Sung Jun, Hwang"}}},"markdownRemark":{"id":"d55a79a8-2db3-50e3-9535-ea2ee8d855fa","excerpt":"Mapstruct를 실무에 사용해보면서 겪은 경험을 공유하고자 합니다. MapStruct에 Get Started에는 정말 간단하게 설명되어 있습니다.\nDTO <-> Entity를 변경해주는 간단한 library 이지만 확장성은 대단합니다. 단순 작업을 build…","html":"<p>Mapstruct를 실무에 사용해보면서 겪은 경험을 공유하고자 합니다.</p>\n<p><a href=\"https://mapstruct.org/\">MapStruct</a>에 Get Started에는 정말 간단하게 설명되어 있습니다.\nDTO &#x3C;-> Entity를 변경해주는 간단한 library 이지만 확장성은 대단합니다.</p>\n<p>단순 작업을 build 단계에서 생성해주어 {Entity}Mapper interface를 {Entity}MapperImpl로 만들어줍니다.</p>\n<p>예를 들어 User Entity에 UserRole이 있다고 가정 해보겠습니다.</p>\n<p>공식 홈페이지에 더 자세한 설명이 있지만 저희 프로젝트에서 사용하는 모습은 이렇습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Mapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uses</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">UserRoleMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> unmappedTargetPolicy <span class=\"token operator\">=</span> <span class=\"token class-name\">ReportingPolicy</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">,</span> nullValueMappingStrategy <span class=\"token operator\">=</span> <span class=\"token class-name\">NullValueMappingStrategy</span><span class=\"token punctuation\">.</span>RETURN_DEFAULT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/**\n   * UserMapper는 연관 Entity Mapper를 사용합니다. users 속한 Mapper 에는 @Mapping(target = \"user\", ignore = true) 설정 되어있습니다.\n   */</span>\n  <span class=\"token class-name\">UserMapper</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token class-name\">Mappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">UserDTO</span> <span class=\"token function\">toDTO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">User</span> <span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> userDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>@Mapper annotation에 적힌 부분을 설명드리겠습니다.</p>\n<p>users - 다른 Mapper 파일을 참조하려고 할 때, 사용됩니다.</p>\n<p>users에 사용된 UserRoleMapper.class입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Mapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uses</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">RoleMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> unmappedTargetPolicy <span class=\"token operator\">=</span> <span class=\"token class-name\">ReportingPolicy</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">,</span> nullValueMappingStrategy <span class=\"token operator\">=</span> <span class=\"token class-name\">NullValueMappingStrategy</span><span class=\"token punctuation\">.</span>RETURN_DEFAULT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRoleMapper</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token class-name\">UserRoleMapper</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token class-name\">Mappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRoleMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Mapping</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">UserRoleDTO</span> <span class=\"token function\">toDTO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRole</span> userRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Mapping</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> ignore <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">UserRole</span> <span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRoleDTO</span> userRoleDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>UserRoleMapper에선 UserRole 안에 있는 user가 변환되는걸 막아야 무한 참조에 빠지지 않습니다.</p>\n<p>그리고 User가 저장되는 기준으로 Entity변환 후 UserRole을 setUserRole 함수를 이용해 담아 주시면 저장이 되어 아직 문제가 된 상황은 발견하지 못했습니다.<br>\n아직 발견하지 못한 문제가 있을 수 있습니다.(저도 알고싶어요..)</p>\n<p>unmappedTargetPolicy - DTO와 Entity에 선언된 변수들이 ignore = true로 되어있지 않은 변수가 변환이 안되는 경우 에러가 나며 Run 되지 않게합니다.</p>\n<p>nullValueMappingStrategy - null인 변수를 초기화 해줍니다. Entity로 변환된 객체에서 .get{OtherEntity}()를 할때 NullpointException을 방지해줍니다.</p>\n<h4>변경사항 2020.08.12</h4>\n<p>nullValueMappingStrategy = NullValueMappingStrategy.RETURN_DEFAULT)를 사용한 Mapper를 이용해 JPA Repository .save(Entity 구현 객체)함수를 실행했지만 이상한 동작이 생겼습니다.<br>\n문제는 위 설정을 통해 항상 NullPointException을 방지하고자 객체를 만듭니다.<br>\n그런 경우 JPA쪽에서 새로운 객체가 생성되고 연관 객체도 Null이 아니여서 Null이 아니지만 텅 빈 객체가 저장될 경우에도 insert를 시도하려고 합니다.<br>\n이러한 상황때문에 거의 모든 경우에 저 설정을 해제했습니다.</p>\n<hr>\n<p>public abstract class UserMapper로 만들어서 beforeMapping이나 afterMapping을 통해 제어도 가능하지만,<br>\n한 파일에 다른 Entity작업을 몰아주는 것이 옳은 것인가 하는 생각이 들어서 각 Entity마다 Mapper를 만들었습니다.</p>\n<p>그래서 Domain별 파일구조는</p>\n<ul>\n<li>\n<p>{domain}</p>\n<ul>\n<li>controller</li>\n<li>model</li>\n<li>dto</li>\n<li>entity</li>\n<li>mapper &#x3C;- 여기에 MapStruct 파일이 domain별로 들어가 있습니다.</li>\n<li>validator</li>\n<li>repository</li>\n<li>service</li>\n</ul>\n</li>\n</ul>\n<p>이런 파일구조로 되어 있습니다.</p>\n<p>UserMapper.INSTANCE.toEntity, toDTO 함수는 DDD패턴으로 각 Entity에서 수행하도록 함수를 구현해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 다른 부분 생략\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">User</span> <span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span> userDTO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span>userDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>DTO &#x3C;-> Entity를 변환해주는 작업을 하게되면 User 객체 (DTO, Entity) 안에는 <code class=\"language-text\">List&lt;UserRoleDTO&gt; userRoles, Set&lt;UserRole&gt; userRoles</code>로 되어있는 부분까지도 변환을 해줍니다.</p>\n<blockquote>\n<p>그러나 Request 요청으로 넘어온 UserDTO 객체 안에 userRoles를 순서대로 넣고싶은 경우 어떻게 할까요?\n왜 DTO는 List interface이고 Entity에는 Set일까요?</p>\n</blockquote>\n<p>DTO가 Request로 넘어올때 Set으로 선언되어 있는 변수는 순서를 보장하지 않아 정렬한 채로 보내도 뒤죽박죽으로 옵니다.<br>\n그런 이유로 List로 되어있습니다.</p>\n<p>Entity에선 중복을 막기 위해 Set으로 선언했습니다.</p>\n<p>Set interface 구현 class는 HashSet으로 되어있어 List로 일괄 변경했습니다.</p>\n<p>처음에는 DTO쪽을 List로만 구현하고 나서 확인해보면 순서대로 와서 이제 DB에 제대로 들어가겠지 싶어서 DB에 저장을 몇번 테스트 해보니 몇건은 정상이었지만 역시 뒤죽박죽이었습니다.</p>\n<p>원인을 찾고보니 DTO가 Entity로 변화되는 시점에 <code class=\"language-text\">Set&lt;UserRole&gt; userRoles</code>가 HashSet으로 생성되어서 그랬습니다.</p>\n<p>Entity를 SortedSet으로 해야하나 싶었지만, JPA가 허용하지 않아서 Set으로 유지했습니다.</p>\n<p>결국 LinkedHashSet을 이용해 List 순서를 이어받아야 하는 상황이었습니다.</p>\n<p>원하던 상황이었지만 구현된 {Entity}MapperImpl을 살펴보면 Set은 HashSet으로 되어있고 interface를 기준으로 알아서 생성되기 때문에 손을 댈 수가 없었습니다.</p>\n<p>저는 정렬을 따로 구현하고 싶지 않았고, MapStruct를 통해 쉽게 바꾸고 싶었습니다.</p>\n<h4>해결책은</h4>\n<p>UserRoleMapper에 Collection 변환 함수를 만드는 것이 아니고 UserMapper에</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserRole</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">userRoleDTOToEntityLinkedHashSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserRoleDTO</span><span class=\"token punctuation\">></span></span> userRoleDTOs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 Collection 변수마다 하나씩 만들어 주게되면 이 함수를 참조하여 for문을 반복합니다.<br>\n덕분에 해결할 수 있었습니다.<br>\n개발 이란게 가끔은 답답하더라도 이런식으로 방법을 찾게되면 참 기분이 좋아집니다.\n문제 없이 돌아가기 위해선 <a href=\"https://get6.github.io/2020/08/07/mapstruct-guide-second.html\">MapStruc 에러 해결 두번째</a>에 나온 방법도 필요합니다.</p>","tableOfContents":"<ul>\n<li><a href=\"/backend/2020/mapstruct-guide-first/#%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-20200812\">변경사항 2020.08.12</a></li>\n<li><a href=\"/backend/2020/mapstruct-guide-first/#%ED%95%B4%EA%B2%B0%EC%B1%85%EC%9D%80\">해결책은</a></li>\n</ul>","frontmatter":{"title":"MapStruct 에러 해결 첫번째","date":"August 07, 2020","description":null,"image":null}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/methodology/2021/gof-design-patterns/"},"frontmatter":{"title":"GoF(Gang of Four) Design Patterns 정리","date":"2021-01-17"}}},{"node":{"fields":{"slug":"/backend/2021/nextauth-guide/"},"frontmatter":{"title":"Next.js로 Admin 만들기","date":"2021-01-16"}}},{"node":{"fields":{"slug":"/backend/2020/test-driven-development/"},"frontmatter":{"title":"TDD(TEST DRIVEN DEVELOPMENT)를 SPRING BOOT에 사용하기","date":"2020-12-01"}}},{"node":{"fields":{"slug":"/backend/2020/mapstruct-guide-second/"},"frontmatter":{"title":"MapStruct 에러 해결 두번째","date":"2020-08-07"}}},{"node":{"fields":{"slug":"/backend/2020/spring-security-example1/"},"frontmatter":{"title":"스프링 시큐리티 구축 1","date":"2020-06-17"}}},{"node":{"fields":{"slug":"/backend/2020/spring-security/"},"frontmatter":{"title":"스프링 시큐리티 구축","date":"2020-06-13"}}},{"node":{"fields":{"slug":"/backend/2020/java-jpa/"},"frontmatter":{"title":"JPA 정리","date":"2020-06-08"}}},{"node":{"fields":{"slug":"/backend/2020/spring-msa-config/"},"frontmatter":{"title":"스프링 부트 MSA 프로젝트 - config 서버 구축","date":"2020-05-27"}}},{"node":{"fields":{"slug":"/backend/2020/spring-initializr-gradle-type/"},"frontmatter":{"title":"Spring Initializr Gradle Type 비교","date":"2020-03-24"}}},{"node":{"fields":{"slug":"/backend/2020/type-of-traffic/"},"frontmatter":{"title":"인바운드 트래픽과 아웃바운드 트래픽 설명","date":"2020-03-18"}}},{"node":{"fields":{"slug":"/backend/2020/gradle-summary/"},"frontmatter":{"title":"Gradle 정리","date":"2020-03-16"}}},{"node":{"fields":{"slug":"/backend/2020/nodejs-express-guid/"},"frontmatter":{"title":"Express 가이드","date":"2020-03-13"}}},{"node":{"fields":{"slug":"/backend/2020/backend-roadmap1/"},"frontmatter":{"title":"Backend Developer - How does the internet work?","date":"2020-03-10"}}},{"node":{"fields":{"slug":"/backend/2020/openbanking-test/"},"frontmatter":{"title":"OpenBanking test 적용","date":"2020-03-10"}}},{"node":{"fields":{"slug":"/backend/2020/python-dynamic-parameter/"},"frontmatter":{"title":"Python binds dynamic parameters","date":"2020-02-21"}}},{"node":{"fields":{"slug":"/backend/2020/mybatis-parameter/"},"frontmatter":{"title":"Mybatis parameter 조심해야할 점","date":"2020-02-13"}}},{"node":{"fields":{"slug":"/backend/2020/sql-problem-solving/"},"frontmatter":{"title":"SQL 가상으로 목록 만들기","date":"2020-02-10"}}},{"node":{"fields":{"slug":"/backend/2020/python-exec-example/"},"frontmatter":{"title":"파이썬 exec 함수 사용방법","date":"2020-01-30"}}},{"node":{"fields":{"slug":"/backend/2020/mariadb-rule/"},"frontmatter":{"title":"MariaDB 문자열 합치기","date":"2020-01-21"}}},{"node":{"fields":{"slug":"/backend/2020/vscode-java-clean/"},"frontmatter":{"title":"vscode에서 java clean하는 법","date":"2020-01-20"}}}]}},"pageContext":{"slug":"/backend/2020/mapstruct-guide-first/","tag":"backend","previous":{"fields":{"slug":"/backend/2020/mapstruct-guide-second/"},"frontmatter":{"tags":["backend","mapstruct","spring"]}},"next":{"fields":{"slug":"/frontend/2020/flutter-firebase-ios/"},"frontmatter":{"tags":["frontend","flutter","firebase","ios"]}}}},"staticQueryHashes":["1146911855","1973561601","3826269039"]}