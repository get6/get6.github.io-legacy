{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/backend/2020/spring-security/","result":{"data":{"site":{"siteMetadata":{"title":"Jun Wick's Blog","author":{"name":"Sung Jun, Hwang"}}},"markdownRemark":{"id":"101b4833-6f2d-5535-b8fe-5515688d365f","excerpt":"회사에서 혼자서 spring-security를 이용해 jwt를 발급하는 구조를 만들었다. 물론 고쳐야 할 부분들은 남아있지만 대략적인 개념을 설명하고자 한다. 스크링 시큐리티를 RESTful API로 사용할 계획이라면 jsp같은 페이지가 필요 없을 것이다. 기본 세팅에선 다른 URL…","html":"<p>회사에서 혼자서 spring-security를 이용해 jwt를 발급하는 구조를 만들었다.<br>\n물론 고쳐야 할 부분들은 남아있지만 대략적인 개념을 설명하고자 한다.</p>\n<p>스크링 시큐리티를 RESTful API로 사용할 계획이라면 jsp같은 페이지가 필요 없을 것이다.</p>\n<p>기본 세팅에선 다른 URL을 요청하면 시큐리티가 권한이 없다고 요청을 거부할 것이다.<br>\n그러면 로그인을 먼저해서 인증을 받아야한다.<br>\npostman을 이용하여 form방식을 이용해 테스트를 했다. email과 password를 post로 날려 요청을 보낼 것이다.<br>\n스프링 시큐리티는 기본적으로 /login 요청을 로그인으로 보기 때문에 Controller에 적지 않아도 요청을 알고있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n      http\n          <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/admin/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADMIN\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 관리자용</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USER\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 사용자용</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/guest/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 회원가입 이메일 인증 전 임시계정?</span>\n          <span class=\"token comment\">// .antMatchers(HttpMethod.GET,\"/\", \"/home\", \"/about\").permitAll()</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/registry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 위를 제외하곤 권한이 있는 사용자는 어디든 접근가능</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span>STATELESS<span class=\"token punctuation\">)</span> <span class=\"token comment\">// no session</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>unauthorizedHandler<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>jwtAccessDeniedHandler<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// add jwt filters (1. authentication, 2. authorization)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span><span class=\"token function\">jwtAuthenticationFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtAuthorizationFilter</span><span class=\"token punctuation\">(</span><span class=\"token function\">authenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> jwtUtils<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">rememberMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">httpBasic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 되어있고 로그인 전 /login 요청은 UsernamePasswordAuthenticationFilter.class를 상속 받아 구현한 filter에 걸리게 된다.</p>\n<p>여기서 email과 password로 AbstractAuthenticationToken를 구현한 Custom token을 생성해 provider로 보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthenticationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약 jwt로 만들때 email과 별 정보를 넣지 않는다면 provider와 Custom token을 만들지 않아도 괜찮다.</p>\n<p>그러나 나는 email과 id 그리고 혹시 몰라 다른 항목이 추가될 수 있을거 같아 Custom token을 만들었었다.<br>\n사실 UsernamePasswordAuthenticationToken애 principal에다가 map이나 다른 자료구조를 이용해 넣어도 돌아가겠지만 정확히 스프링 시큐리티를 이해하지 못했기 때문에 필드를 생성해 명확히 하는게 낫겠다 싶었다.(책을 정독하자..)</p>\n<p>AbstractAuthenticationToken를 상속받은 Custom token에 DB에서 조회한 데이터를 넣어준다.</p>\n<p>스프링 시큐리티는 기본적으로 DaoAuthenticationProvider를 사용해 여기서 비밀번호 검증까지 해주는데 나는 Controller쪽에서 내가 만든 JwtAuthenticationToken객체를 @AuthenticationPrincipal를 사용해 가져와야 했기때문에 provider를 구현했다.</p>\n<p>로그인에 성공하면 jwt로 만든 토큰을 response.header에 실어 돌려주는데</p>\n<p>그 뒤로 오는 요청은 BasicAuthenticationFilter을 상속받은 filter에 걸려 jwt를 decode해 사용자를 확인한다.</p>\n<p>처음에는 filter 두개 UsernamePasswordAuthenticationFilter, BasicAuthenticationFilter만 있어도 로그인이 되길래 이렇게하면 되나 싶었지만,<br>\n비즈니스 로직을 위한 상황이 필요할거 같아 UsernamePasswordAuthenticationToken 말고 원하는 Custom token을 사용하기 위해선 AuthenticationProvider 구현한 provider도 필요했다.</p>\n<p>나중에 블로그 좀 더 바꾸고 스프링 시큐리티 모두가 이해할 수 있게 쉽게 시리즈로 작성해 보겠습니다…</p>\n<p>이 정도까지 이해할 수 있게 해준 블로거분들과 인터넷 글들께 감사를 드립니다아아</p>","tableOfContents":"","frontmatter":{"title":"스프링 시큐리티 구축","date":"June 13, 2020","description":null,"image":null}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/methodology/2021/gof-design-patterns/"},"frontmatter":{"title":"GoF(Gang of Four) Design Patterns 정리","date":"2021-01-17"}}},{"node":{"fields":{"slug":"/backend/2021/nextauth-guide/"},"frontmatter":{"title":"Next.js로 Admin 만들기","date":"2021-01-16"}}},{"node":{"fields":{"slug":"/backend/2020/test-driven-development/"},"frontmatter":{"title":"TDD(TEST DRIVEN DEVELOPMENT)를 SPRING BOOT에 사용하기","date":"2020-12-01"}}},{"node":{"fields":{"slug":"/backend/2020/mapstruct-guide-first/"},"frontmatter":{"title":"MapStruct 에러 해결 첫번째","date":"2020-08-07"}}},{"node":{"fields":{"slug":"/backend/2020/mapstruct-guide-second/"},"frontmatter":{"title":"MapStruct 에러 해결 두번째","date":"2020-08-07"}}},{"node":{"fields":{"slug":"/backend/2020/spring-security-example1/"},"frontmatter":{"title":"스프링 시큐리티 구축 1","date":"2020-06-17"}}},{"node":{"fields":{"slug":"/backend/2020/java-jpa/"},"frontmatter":{"title":"JPA 정리","date":"2020-06-08"}}},{"node":{"fields":{"slug":"/backend/2020/spring-msa-config/"},"frontmatter":{"title":"스프링 부트 MSA 프로젝트 - config 서버 구축","date":"2020-05-27"}}},{"node":{"fields":{"slug":"/backend/2020/spring-initializr-gradle-type/"},"frontmatter":{"title":"Spring Initializr Gradle Type 비교","date":"2020-03-24"}}},{"node":{"fields":{"slug":"/backend/2020/type-of-traffic/"},"frontmatter":{"title":"인바운드 트래픽과 아웃바운드 트래픽 설명","date":"2020-03-18"}}},{"node":{"fields":{"slug":"/backend/2020/gradle-summary/"},"frontmatter":{"title":"Gradle 정리","date":"2020-03-16"}}},{"node":{"fields":{"slug":"/backend/2020/nodejs-express-guid/"},"frontmatter":{"title":"Express 가이드","date":"2020-03-13"}}},{"node":{"fields":{"slug":"/backend/2020/backend-roadmap1/"},"frontmatter":{"title":"Backend Developer - How does the internet work?","date":"2020-03-10"}}},{"node":{"fields":{"slug":"/backend/2020/openbanking-test/"},"frontmatter":{"title":"OpenBanking test 적용","date":"2020-03-10"}}},{"node":{"fields":{"slug":"/backend/2020/python-dynamic-parameter/"},"frontmatter":{"title":"Python binds dynamic parameters","date":"2020-02-21"}}},{"node":{"fields":{"slug":"/backend/2020/mybatis-parameter/"},"frontmatter":{"title":"Mybatis parameter 조심해야할 점","date":"2020-02-13"}}},{"node":{"fields":{"slug":"/backend/2020/sql-problem-solving/"},"frontmatter":{"title":"SQL 가상으로 목록 만들기","date":"2020-02-10"}}},{"node":{"fields":{"slug":"/backend/2020/python-exec-example/"},"frontmatter":{"title":"파이썬 exec 함수 사용방법","date":"2020-01-30"}}},{"node":{"fields":{"slug":"/backend/2020/mariadb-rule/"},"frontmatter":{"title":"MariaDB 문자열 합치기","date":"2020-01-21"}}},{"node":{"fields":{"slug":"/backend/2020/vscode-java-clean/"},"frontmatter":{"title":"vscode에서 java clean하는 법","date":"2020-01-20"}}}]}},"pageContext":{"slug":"/backend/2020/spring-security/","tag":"backend","previous":{"fields":{"slug":"/backend/2020/java-jpa/"},"frontmatter":{"tags":["backend","jpa","java"]}},"next":{"fields":{"slug":"/backend/2020/spring-security-example1/"},"frontmatter":{"tags":["backend","java","spring","spring-security"]}}}},"staticQueryHashes":["1146911855","1973561601","3826269039"]}