{"pageProps":{"post":{"title":"스프링 시큐리티 구축 1","date":"2020-06-17","slug":"backend/2020/spring-security-example1/index","content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Contents</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<p>2020년 기준으로 스프링은 모놀리식 방식의 서버 구성보다는 MSA를 활용하여 RESTful API Server를 만드려고 할 것입니다.</p>\n<p>스프링 시큐리티를 RESTful하게 구축해 다른 웹 서버와 통신하며 로그인 절차를 진행하도록 하겠습니다.</p>\n<p>Postman을 설치하는게 REST API를 테스트하는데 좋습니다. <a href=\"https://www.postman.com/\">Postman 링크</a></p>\n<p>적당한 위치에 @EnableWebSecurity 선언한 클래스 파일을 만들어 줍니다.</p>\n<pre><code class=\"language-java\">@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter\n</code></pre>\n<p>이 annotation을 스프링에서 읽어 환경 설정을 참조합니다.</p>\n<pre><code class=\"language-java\">@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        .rememberMe().disable()\n        .formLogin().disable()\n        .httpBasic().disable()\n        .logout().disable()\n        .csrf().disable();\n}\n</code></pre>\n</body>\n</html>\n"}},"__N_SSG":true}