{"pageProps":{"post":{"title":"스프링 부트 MSA 프로젝트 - config 서버 구축","date":"2020-05-27","slug":"backend/2020/spring-msa-config/index","content":"<p>Spring initializr로 프로젝트를 생성합니다.</p>\n<p>Developer Tools에서 Spring Boot DevTools, Spring Configuration Processor를 선택합니다.</p>\n<p>Spring Cloug Config에선 Config Server를 선택합니다.</p>\n<p>그 다음 Config-Server로 지정할 annotation을 입력합니다.</p>\n<pre><code>@SpringBootApplication\n@EnableConfigServer &#x3C;-- 이 부분입니다.\npublic class ConfigApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(ConfigApplication.class, args);\n  }\n\n}\n</code></pre>\n<p>저는 application과 bootstrap을 yaml파일을 사용 할 겁니다.</p>\n<p>bootstrap.yml</p>\n<pre><code>encrypt:\n  key: hello # temporary encrypt key\nspring:\n  cloud:\n    config:\n      server:\n        encrypt:\n          enabled: false # 암호문 복호화 하지않고 돌려줌 (보안)\n</code></pre>\n<p>application.yml</p>\n<pre><code>spring:\n  profiles:\n    active: native\nserver:\n  port: 8888\n\n---\nspring:\n  profiles: native\n  cloud:\n    config:\n      server:\n        native:\n          search-locations:\n            - ${user.home}/Documents/Development/config-repo/account\n            - ${user.home}/Documents/Development/config-repo/board\n</code></pre>\n<p>여기서는 깃 저장소 연동이 아닌 로컬 경로에 저장된 application.yml을 가져옵니다.</p>\n<p>search-locations를 여러개 적으면 각 디렉토리 별 환경설정 파일을 가져올 수 있습니다.</p>\n<p>config-server가 구동이 되면 8888포트로 <a href=\"http://localhost:8888/%7Bapplication-name%7D/%7Bprofiles\">http://localhost:8888/{application-name}/{profiles</a>} 요청을 받습니다.</p>\n<p>요청을 보낸 서비스는 경로 상에 존재하는 파일을 보내줍니다.</p>\n<p>다음에는 환경설정 파일들이 존재하는 폴더를 설명하겠습니다. &#x3C;-- config-repo가 될 폴더입니다.</p>\n"}},"__N_SSG":true}