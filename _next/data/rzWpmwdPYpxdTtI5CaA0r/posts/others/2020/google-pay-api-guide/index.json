{"pageProps":{"post":{"title":"Google Pay API 가이드","date":"2020-03-13","slug":"others/2020/google-pay-api-guide/index","content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Contents</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n<body>\n<p>Google Pay API를 해보는 과정을 정리해보려고 합니다.</p>\n<p>Google Pay API를 테스트하기전에 nodeJS express를 통해 웹서버를 만들어야 합니다. <a href=\"/2020-03-13-nodejs-express-guide.markdown\">링크</a></p>\n<p><a href=\"https://developers.google.com/pay/api/web/guides/setup\">Google Pay API 설정</a>에서 결제 수단을 링크를 눌러 카드를 등록합니다.</p>\n<p>로그인 한 계정에 신용카드 또는 체크카드를 추가하면 결제 수단 등록이 완료됩니다.</p>\n<p>이제 왼쪽 네비게이션 가이드 - 가이드 메뉴를 누릅니다.</p>\n<p><img src=\"./images/google-pay-selected-guide.png\" alt=\"구글 가이드\">{: width=\"50%\"}</p>\n<p>가이드를 참조하시면서 함수와 설명을 잘 읽어봅니다.\n버튼이 나타나기 위해선 아래와 같이 div로 버튼 영역을 잡아주고\n아래 스크립트는 구글페이를 사용하기 위해서 필요한 외부함수입니다. 저희쪽에서 가지고 있을 js파일이 아닙니다.</p>\n<pre><code class=\"language-html\">&#x3C;div id=\"container\">&#x3C;/div>\n&#x3C;script\n  async\n  src=\"https://pay.google.com/gp/p/js/pay.js\"\n  onload=\"onGooglePayLoaded()\"\n>&#x3C;/script>\n</code></pre>\n<p>아래는 우리쪽에서 파일로 만들어야 할 js입니다.</p>\n<pre><code class=\"language-javascript\">/**\n * Define the version of the Google Pay API referenced when creating your\n * configuration\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|apiVersion in PaymentDataRequest}\n */\nconst baseRequest = {\n  apiVersion: 2,\n  apiVersionMinor: 0,\n}\n\n/**\n * Card networks supported by your site and your gateway\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n * @todo confirm card networks supported by your site and gateway\n */\nconst allowedCardNetworks = [\n  \"AMEX\",\n  \"DISCOVER\",\n  \"INTERAC\",\n  \"JCB\",\n  \"MASTERCARD\",\n  \"VISA\",\n]\n\n/**\n * Card authentication methods supported by your site and your gateway\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n * @todo confirm your processor supports Android device tokens for your\n * supported card networks\n */\nconst allowedCardAuthMethods = [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"]\n\n/**\n * Identify your gateway and your site's gateway merchant identifier\n *\n * The Google Pay API response will return an encrypted payment method capable\n * of being charged by a supported gateway after payer authorization\n *\n * @todo check with your gateway on the parameters to pass\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#gateway|PaymentMethodTokenizationSpecification}\n */\nconst tokenizationSpecification = {\n  type: \"PAYMENT_GATEWAY\",\n  parameters: {\n    gateway: \"example\",\n    gatewayMerchantId: \"exampleGatewayMerchantId\",\n  },\n}\n\n/**\n * Describe your site's support for the CARD payment method and its required\n * fields\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n */\nconst baseCardPaymentMethod = {\n  type: \"CARD\",\n  parameters: {\n    allowedAuthMethods: allowedCardAuthMethods,\n    allowedCardNetworks: allowedCardNetworks,\n  },\n}\n\n/**\n * Describe your site's support for the CARD payment method including optional\n * fields\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#CardParameters|CardParameters}\n */\nconst cardPaymentMethod = Object.assign({}, baseCardPaymentMethod, {\n  tokenizationSpecification: tokenizationSpecification,\n})\n\n/**\n * An initialized google.payments.api.PaymentsClient object or null if not yet set\n *\n * @see {@link getGooglePaymentsClient}\n */\nlet paymentsClient = null\n\n/**\n * Configure your site's support for payment methods supported by the Google Pay\n * API.\n *\n * Each member of allowedPaymentMethods should contain only the required fields,\n * allowing reuse of this base request when determining a viewer's ability\n * to pay and later requesting a supported payment method\n *\n * @returns {object} Google Pay API version, payment methods supported by the site\n */\nfunction getGoogleIsReadyToPayRequest() {\n  return Object.assign({}, baseRequest, {\n    allowedPaymentMethods: [baseCardPaymentMethod],\n  })\n}\n\n/**\n * Configure support for the Google Pay API\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#PaymentDataRequest|PaymentDataRequest}\n * @returns {object} PaymentDataRequest fields\n */\nfunction getGooglePaymentDataRequest() {\n  const paymentDataRequest = Object.assign({}, baseRequest)\n  paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod]\n  paymentDataRequest.transactionInfo = getGoogleTransactionInfo()\n  paymentDataRequest.merchantInfo = {\n    // @todo a merchant ID is available for a production environment after approval by Google\n    // See {@link https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist|Integration checklist}\n    // merchantId: '01234567890123456789',\n    merchantName: \"Example Merchant\",\n  }\n  return paymentDataRequest\n}\n\n/**\n * Return an active PaymentsClient or initialize\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}\n * @returns {google.payments.api.PaymentsClient} Google Pay API client\n */\nfunction getGooglePaymentsClient() {\n  if (paymentsClient === null) {\n    paymentsClient = new google.payments.api.PaymentsClient({\n      environment: \"TEST\",\n    })\n  }\n  return paymentsClient\n}\n\n/**\n * Initialize Google PaymentsClient after Google-hosted JavaScript has loaded\n *\n * Display a Google Pay payment button after confirmation of the viewer's\n * ability to pay.\n */\nfunction onGooglePayLoaded() {\n  const paymentsClient = getGooglePaymentsClient()\n  paymentsClient\n    .isReadyToPay(getGoogleIsReadyToPayRequest())\n    .then(function (response) {\n      if (response.result) {\n        addGooglePayButton()\n        // @todo prefetch payment data to improve performance after confirming site functionality\n        // prefetchGooglePaymentData();\n      }\n    })\n    .catch(function (err) {\n      // show error in developer console for debugging\n      console.error(err)\n    })\n}\n\n/**\n * Add a Google Pay purchase button alongside an existing checkout button\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#ButtonOptions|Button options}\n * @see {@link https://developers.google.com/pay/api/web/guides/brand-guidelines|Google Pay brand guidelines}\n */\nfunction addGooglePayButton() {\n  const paymentsClient = getGooglePaymentsClient()\n  const button = paymentsClient.createButton({\n    onClick: onGooglePaymentButtonClicked,\n  })\n  document.getElementById(\"container\").appendChild(button)\n}\n\n/**\n * Provide Google Pay API with a payment amount, currency, and amount status\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/request-objects#TransactionInfo|TransactionInfo}\n * @returns {object} transaction info, suitable for use as transactionInfo property of PaymentDataRequest\n */\nfunction getGoogleTransactionInfo() {\n  return {\n    countryCode: \"US\",\n    currencyCode: \"USD\",\n    totalPriceStatus: \"FINAL\",\n    // set to cart total\n    totalPrice: \"1.00\",\n  }\n}\n\n/**\n * Prefetch payment data to improve performance\n *\n * @see {@link https://developers.google.com/pay/api/web/reference/client#prefetchPaymentData|prefetchPaymentData()}\n */\nfunction prefetchGooglePaymentData() {\n  const paymentDataRequest = getGooglePaymentDataRequest()\n  // transactionInfo must be set but does not affect cache\n  paymentDataRequest.transactionInfo = {\n    totalPriceStatus: \"NOT_CURRENTLY_KNOWN\",\n    currencyCode: \"USD\",\n  }\n  const paymentsClient = getGooglePaymentsClient()\n  paymentsClient.prefetchPaymentData(paymentDataRequest)\n}\n\n/**\n * Show Google Pay payment sheet when Google Pay payment button is clicked\n */\nfunction onGooglePaymentButtonClicked() {\n  const paymentDataRequest = getGooglePaymentDataRequest()\n  paymentDataRequest.transactionInfo = getGoogleTransactionInfo()\n\n  const paymentsClient = getGooglePaymentsClient()\n  paymentsClient\n    .loadPaymentData(paymentDataRequest)\n    .then(function (paymentData) {\n      // handle the response\n      processPayment(paymentData)\n    })\n    .catch(function (err) {\n      // show error in developer console for debugging\n      console.error(err)\n    })\n}\n\n/**\n * Process payment data returned by the Google Pay API\n *\n * @param {object} paymentData response from Google Pay API after user approves payment\n * @see {@link https://developers.google.com/pay/api/web/reference/response-objects#PaymentData|PaymentData object reference}\n */\nfunction processPayment(paymentData) {\n  // show returned data in developer console for debugging\n  console.log(paymentData)\n  // @todo pass payment token to your gateway to process payment\n  paymentToken = paymentData.paymentMethodData.tokenizationData.token\n}\n</code></pre>\n</body>\n</html>\n"}},"__N_SSG":true}